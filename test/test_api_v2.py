#!/usr/bin/env python3
"""
üß™ Test API EIR - Version 2.0 avec Configuration Centralis√©e JSON
Tests automatis√©s utilisant la configuration JSON centralis√©e des endpoints
"""

import requests
import json
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
import sys
import os

# Importer la nouvelle configuration JSON
try:
    from api_endpoints_config_v2 import (
        ENDPOINTS, TEST_CONFIG, TEST_GROUPS, 
        get_endpoint, get_all_endpoints, get_test_group,
        get_endpoints_by_tag, API_CONFIG, APIEndpointsConfig
    )
    print("‚úÖ Configuration JSON charg√©e avec succ√®s")
except ImportError:
    # Fallback vers l'ancienne configuration Python
    from api_endpoints_config import (
        ENDPOINTS, TEST_CONFIG, TEST_GROUPS, 
        get_endpoint, get_all_endpoints, get_test_group,
        get_endpoints_by_tag, API_CONFIG
    )
    print("‚ö†Ô∏è  Utilisation de la configuration Python (fallback)")

class APITesterV2:
    def __init__(self, base_url: str = None, test_group: str = "core"):
        self.base_url = base_url or TEST_CONFIG["base_url"]
        self.session = requests.Session()
        self.token = None
        self.test_results = []
        self.test_group = test_group
        self.summary = {
            "total_tests": 0,
            "passed": 0,
            "failed": 0,
            "warnings": 0,
            "skipped": 0,
            "start_time": None,
            "end_time": None,
            "duration": None,
            "test_group": test_group,
            "api_info": API_CONFIG["info"]
        }

    def log_test(self, endpoint_info: dict, status: str, response_code: int = None, 
                 response_time: float = None, error: str = None, response_data: Any = None):
        """Enregistrer le r√©sultat d'un test avec informations d'endpoint"""
        result = {
            "name": endpoint_info.get("summary", "Unknown"),
            "category": endpoint_info.get("category", "Unknown"),
            "endpoint_key": endpoint_info.get("endpoint_key", "Unknown"),
            "method": endpoint_info.get("method", "GET"),
            "path": endpoint_info.get("path", ""),
            "tags": endpoint_info.get("tags", []),
            "auth_required": endpoint_info.get("auth_required", False),
            "test_priority": endpoint_info.get("test_priority", "medium"),
            "status": status,
            "response_code": response_code,
            "response_time": response_time,
            "error": error,
            "response_data": response_data,
            "timestamp": datetime.now().isoformat()
        }
        
        self.test_results.append(result)
        self.summary["total_tests"] += 1
        
        status_icon = {
            "PASS": "‚úÖ",
            "FAIL": "‚ùå", 
            "WARN": "‚ö†Ô∏è",
            "SKIP": "‚è≠Ô∏è"
        }.get(status, "‚ùì")
        
        if status == "PASS":
            self.summary["passed"] += 1
        elif status == "FAIL":
            self.summary["failed"] += 1
        elif status == "WARN":
            self.summary["warnings"] += 1
        elif status == "SKIP":
            self.summary["skipped"] += 1
            
        # Affichage avec plus d'informations
        priority_icon = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(
            endpoint_info.get("test_priority", "medium"), "‚ö™"
        )
        
        print(f"{status_icon} {priority_icon} {endpoint_info.get('summary', 'Unknown')} - {status}")
        if error and status in ["FAIL", "WARN"]:
            print(f"    üí¨ {error}")
        if response_time:
            print(f"    ‚è±Ô∏è  {response_time:.3f}s")

    def make_request(self, endpoint_config: dict, path_params: dict = None) -> requests.Response:
        """Faire une requ√™te HTTP bas√©e sur la configuration d'endpoint"""
        path = endpoint_config["path"]
        method = endpoint_config.get("method", "GET").upper()
        
        # Remplacer les param√®tres de chemin
        if path_params:
            for param, value in path_params.items():
                path = path.replace(f"{{{param}}}", str(value))
        
        url = f"{self.base_url}{path}"
        
        # Pr√©parer les headers
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        # Ajouter l'authentification si n√©cessaire
        if endpoint_config.get("auth_required", False) and self.token:
            headers["Authorization"] = f"Bearer {self.token}"
        
        # Pr√©parer les donn√©es de test
        test_data = endpoint_config.get("test_data")
        
        try:
            if method == "GET":
                response = self.session.get(url, headers=headers, timeout=TEST_CONFIG["default_timeout"])
            elif method == "POST":
                response = self.session.post(url, json=test_data, headers=headers, timeout=TEST_CONFIG["default_timeout"])
            elif method == "PUT":
                response = self.session.put(url, json=test_data, headers=headers, timeout=TEST_CONFIG["default_timeout"])
            elif method == "DELETE":
                response = self.session.delete(url, headers=headers, timeout=TEST_CONFIG["default_timeout"])
            else:
                raise ValueError(f"M√©thode HTTP non support√©e: {method}")
                
            return response
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erreur de requ√™te: {str(e)}")

    def authenticate(self) -> bool:
        """S'authentifier avec les credentials par d√©faut"""
        login_config = get_endpoint("auth", "login")
        if not login_config:
            print("‚ùå Configuration de login non trouv√©e")
            return False
            
        try:
            auth_data = TEST_CONFIG["test_users"]["admin"]
            login_config["test_data"] = auth_data
            
            print("üîê Authentification en cours...")
            start_time = time.time()
            response = self.make_request(login_config)
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                if "access_token" in data:
                    self.token = data["access_token"]
                    print(f"‚úÖ Authentification r√©ussie ({response_time:.3f}s)")
                    return True
                else:
                    print("‚ùå Token non trouv√© dans la r√©ponse")
                    return False
            else:
                print(f"‚ùå √âchec authentification: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'authentification: {str(e)}")
            return False

    def test_endpoint(self, category: str, endpoint_key: str, endpoint_config: dict):
        """Tester un endpoint sp√©cifique"""
        endpoint_info = {
            "category": category,
            "endpoint_key": endpoint_key,
            **endpoint_config
        }
        
        try:
            # V√©rifier si l'authentification est requise
            if endpoint_config.get("auth_required", False) and not self.token:
                self.log_test(
                    endpoint_info, "SKIP", None, None,
                    "Authentification requise mais non disponible"
                )
                return
            
            # Pr√©parer les param√®tres de chemin si n√©cessaire
            path_params = endpoint_config.get("path_params", {})
            if path_params:
                # Utiliser les donn√©es de test par d√©faut si n√©cessaire
                for param, default_value in path_params.items():
                    if param in TEST_CONFIG["test_data"]:
                        path_params[param] = TEST_CONFIG["test_data"][param]
            
            # Ex√©cuter la requ√™te
            start_time = time.time()
            response = self.make_request(endpoint_config, path_params)
            response_time = time.time() - start_time
            
            # Analyser la r√©ponse
            self.analyze_response(endpoint_info, response, response_time)
            
        except Exception as e:
            self.log_test(endpoint_info, "FAIL", None, None, str(e))

    def analyze_response(self, endpoint_info: dict, response: requests.Response, response_time: float):
        """Analyser la r√©ponse d'un endpoint"""
        endpoint_config = endpoint_info
        
        # Codes de statut attendus selon le contexte
        if response.status_code == 200:
            # Succ√®s - v√©rifier le contenu
            try:
                data = response.json()
                expected_fields = endpoint_config.get("expected_fields", [])
                
                if expected_fields:
                    missing_fields = [field for field in expected_fields if field not in data]
                    if missing_fields:
                        self.log_test(
                            endpoint_info, "WARN", response.status_code, response_time,
                            f"Champs manquants: {missing_fields}", data
                        )
                    else:
                        self.log_test(
                            endpoint_info, "PASS", response.status_code, response_time,
                            None, {"validated_fields": expected_fields}
                        )
                else:
                    self.log_test(
                        endpoint_info, "PASS", response.status_code, response_time,
                        None, {"response_size": len(str(data))}
                    )
                    
            except json.JSONDecodeError:
                self.log_test(
                    endpoint_info, "WARN", response.status_code, response_time,
                    "R√©ponse non-JSON", {"content_type": response.headers.get("content-type")}
                )
                
        elif response.status_code == 401:
            # Non autoris√© - normal pour certains endpoints
            if endpoint_config.get("auth_required", False):
                self.log_test(
                    endpoint_info, "WARN", response.status_code, response_time,
                    "Authentification requise (attendu)"
                )
            else:
                self.log_test(
                    endpoint_info, "FAIL", response.status_code, response_time,
                    "Authentification inattendue"
                )
                
        elif response.status_code == 403:
            # Interdit - peut √™tre normal selon les permissions
            self.log_test(
                endpoint_info, "WARN", response.status_code, response_time,
                "Acc√®s interdit (permissions insuffisantes)"
            )
            
        elif response.status_code == 404:
            # Non trouv√©
            self.log_test(
                endpoint_info, "FAIL", response.status_code, response_time,
                "Endpoint non trouv√©"
            )
            
        elif response.status_code >= 500:
            # Erreur serveur
            self.log_test(
                endpoint_info, "FAIL", response.status_code, response_time,
                f"Erreur serveur: {response.status_code}"
            )
            
        else:
            # Autres codes de statut
            self.log_test(
                endpoint_info, "WARN", response.status_code, response_time,
                f"Code de statut inattendu: {response.status_code}"
            )

    def run_tests(self):
        """Ex√©cuter tous les tests du groupe s√©lectionn√©"""
        print(f"\nüöÄ D√©marrage des tests API EIR - Groupe: {self.test_group}")
        print(f"üìç URL de base: {self.base_url}")
        print(f"üìã API: {API_CONFIG['info']['title']} v{API_CONFIG['info']['version']}")
        print("=" * 60)
        
        self.summary["start_time"] = datetime.now().isoformat()
        
        # Obtenir les endpoints √† tester
        if self.test_group == "all":
            endpoints_to_test = []
            for category_name, category in get_all_endpoints().items():
                for endpoint_key, endpoint_config in category.items():
                    endpoints_to_test.append((category_name, endpoint_key, endpoint_config))
        else:
            endpoint_keys = get_test_group(self.test_group)
            endpoints_to_test = []
            
            for endpoint_ref in endpoint_keys:
                if "." in endpoint_ref:
                    category_name, endpoint_key = endpoint_ref.split(".", 1)
                    endpoint_config = get_endpoint(category_name, endpoint_key)
                    if endpoint_config:
                        endpoints_to_test.append((category_name, endpoint_key, endpoint_config))
        
        print(f"üìä Nombre d'endpoints √† tester: {len(endpoints_to_test)}")
        
        # Authentification si n√©cessaire
        auth_needed = any(ep[2].get("auth_required", False) for ep in endpoints_to_test)
        if auth_needed:
            if not self.authenticate():
                print("‚ùå Impossible de continuer sans authentification")
                return
        
        print("\nüß™ Ex√©cution des tests...")
        print("-" * 40)
        
        # Ex√©cuter les tests par priorit√©
        priorities = ["high", "medium", "low"]
        for priority in priorities:
            priority_tests = [ep for ep in endpoints_to_test if ep[2].get("test_priority") == priority]
            
            if priority_tests:
                priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
                print(f"\n{priority_icons[priority]} Tests priorit√© {priority.upper()} ({len(priority_tests)} endpoints)")
                
                for category_name, endpoint_key, endpoint_config in priority_tests:
                    self.test_endpoint(category_name, endpoint_key, endpoint_config)
                    time.sleep(0.1)  # Petite pause entre les tests
        
        self.summary["end_time"] = datetime.now().isoformat()
        start_dt = datetime.fromisoformat(self.summary["start_time"])
        end_dt = datetime.fromisoformat(self.summary["end_time"])
        self.summary["duration"] = (end_dt - start_dt).total_seconds()
        
        self.print_summary()
        self.save_report()

    def print_summary(self):
        """Afficher le r√©sum√© des tests"""
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 60)
        
        print(f"üéØ Groupe de test: {self.test_group}")
        print(f"‚è±Ô∏è  Dur√©e totale: {self.summary['duration']:.2f}s")
        print(f"üìä Tests ex√©cut√©s: {self.summary['total_tests']}")
        print(f"‚úÖ R√©ussites: {self.summary['passed']}")
        print(f"‚ùå √âchecs: {self.summary['failed']}")
        print(f"‚ö†Ô∏è  Avertissements: {self.summary['warnings']}")
        print(f"‚è≠Ô∏è  Ignor√©s: {self.summary['skipped']}")
        
        if self.summary['total_tests'] > 0:
            success_rate = (self.summary['passed'] / self.summary['total_tests']) * 100
            print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
            
            # Temps de r√©ponse moyen
            response_times = [r['response_time'] for r in self.test_results if r['response_time']]
            if response_times:
                avg_time = sum(response_times) / len(response_times)
                max_time = max(response_times)
                min_time = min(response_times)
                print(f"‚ö° Temps de r√©ponse moyen: {avg_time:.3f}s")
                print(f"üêå Plus lent: {max_time:.3f}s")
                print(f"üöÄ Plus rapide: {min_time:.3f}s")
        
        # Recommandations
        print("\nüí° RECOMMANDATIONS:")
        if self.summary['failed'] > 0:
            print("  üîß Corriger les endpoints en √©chec")
            failed_endpoints = [r['name'] for r in self.test_results if r['status'] == 'FAIL']
            print(f"     Endpoints √©chou√©s: {', '.join(failed_endpoints[:3])}...")
        
        if self.summary['warnings'] > 0:
            print("  ‚ö†Ô∏è  V√©rifier les avertissements")
        
        if self.summary['passed'] == self.summary['total_tests']:
            print("  üéâ Excellent! Tous les tests passent!")

    def save_report(self):
        """Sauvegarder le rapport d√©taill√©"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"api_test_report_v2_{timestamp}.json"
        
        report = {
            "summary": self.summary,
            "results": self.test_results,
            "config": {
                "test_group": self.test_group,
                "base_url": self.base_url,
                "api_info": API_CONFIG["info"]
            }
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Rapport sauvegard√©: {filename}")
        except Exception as e:
            print(f"\n‚ùå Erreur sauvegarde rapport: {str(e)}")

def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test API EIR v2.0 avec configuration centralis√©e")
    parser.add_argument("--url", default=TEST_CONFIG["base_url"], help="URL de base de l'API")
    parser.add_argument("--group", default="core", choices=list(TEST_GROUPS.keys()) + ["all"], 
                       help="Groupe de tests √† ex√©cuter")
    parser.add_argument("--list-groups", action="store_true", help="Lister les groupes disponibles")
    parser.add_argument("--list-endpoints", action="store_true", help="Lister tous les endpoints")
    parser.add_argument("--tag", help="Tester uniquement les endpoints avec ce tag")
    
    args = parser.parse_args()
    
    if args.list_groups:
        print("üìã Groupes de test disponibles:")
        for group_name, endpoints in TEST_GROUPS.items():
            count = len(endpoints) if isinstance(endpoints, list) else "tous"
            print(f"  üéØ {group_name}: {count} endpoints")
        return
    
    if args.list_endpoints:
        print("üìã Tous les endpoints disponibles:")
        for category_name, category in get_all_endpoints().items():
            print(f"\nüìÇ {category_name}:")
            for endpoint_key, endpoint in category.items():
                auth_icon = "üîê" if endpoint.get("auth_required") else "üåê"
                priority_icon = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(
                    endpoint.get("test_priority", "medium"), "‚ö™"
                )
                print(f"  {auth_icon} {priority_icon} {endpoint_key}: {endpoint.get('method', 'GET')} {endpoint.get('path', '')}")
        return
    
    if args.tag:
        # Tester uniquement les endpoints avec un tag sp√©cifique
        matching_endpoints = get_endpoints_by_tag(args.tag)
        print(f"üè∑Ô∏è  Endpoints avec tag '{args.tag}': {len(matching_endpoints)}")
        if not matching_endpoints:
            print("‚ùå Aucun endpoint trouv√© avec ce tag")
            return
        
        # Cr√©er un groupe temporaire
        temp_group = [f"{ep['category']}.{ep['name']}" for ep in matching_endpoints]
        TEST_GROUPS[f"tag_{args.tag}"] = temp_group
        test_group = f"tag_{args.tag}"
    else:
        test_group = args.group
    
    # Cr√©er et ex√©cuter le testeur
    tester = APITesterV2(args.url, test_group)
    
    try:
        tester.run_tests()
        
        # Code de sortie bas√© sur les r√©sultats
        if tester.summary["failed"] > 0:
            sys.exit(1)
        elif tester.summary["warnings"] > 0:
            sys.exit(2)
        else:
            sys.exit(0)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Tests interrompus par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Erreur critique: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
