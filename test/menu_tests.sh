#!/bin/bash

# üéØ Menu Principal des Outils de Test API EIR
# Interface unique pour acc√©der √† tous les outils de test

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
API_URL="http://localhost:8000"

show_header() {
    clear
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë              üß™ OUTILS DE TEST API EIR üß™               ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üåê API URL: ${YELLOW}$API_URL${NC}"
    echo -e "${CYAN}üìÖ $(date)${NC}"
    echo ""
}

show_menu() {
    echo -e "${GREEN}üìã OUTILS DISPONIBLES:${NC}"
    echo ""
    echo -e "${YELLOW}üöÄ TESTS RAPIDES:${NC}"
    echo "  1Ô∏è‚É£  Test Rapide (5s)           - V√©rification de base"
    echo "  2Ô∏è‚É£  Tests Complets (1min)      - Tous les endpoints"
    echo "  3Ô∏è‚É£  Tableau de Bord            - Interface interactive"
    echo ""
    echo -e "${YELLOW}üÜï TESTS V2.0 - CENTRALIS√âS:${NC}"
    echo "  1Ô∏è‚É£2Ô∏è‚É£ Test Rapide v2 (smoke)     - Endpoints critiques"
    echo "  1Ô∏è‚É£3Ô∏è‚É£ Tests Core v2 (core)       - Endpoints essentiels"
    echo "  1Ô∏è‚É£4Ô∏è‚É£ Tests Complets v2 (all)    - Configuration centralis√©e"
    echo ""
    echo -e "${YELLOW}üîß CONFIGURATION:${NC}"
    echo "  4Ô∏è‚É£  Configuration Automatique  - Setup complet"
    echo "  5Ô∏è‚É£  V√©rifier l'√âtat API       - Status de l'API"
    echo "  6Ô∏è‚É£  Red√©marrer API             - Red√©marrage conteneurs"
    echo ""
    echo -e "${YELLOW}üìä ANALYSE & MONITORING:${NC}"
    echo "  7Ô∏è‚É£  Analyser R√©sultats         - Analyse des rapports"
    echo "  8Ô∏è‚É£  Monitoring Continu         - Surveillance temps r√©el"
    echo "  9Ô∏è‚É£  Voir les Logs              - Logs de l'API"
    echo ""
    echo -e "${YELLOW}üìö AIDE:${NC}"
    echo "  üîü Documentation               - Guide complet"
    echo "  1Ô∏è‚É£1Ô∏è‚É£ Liste des Fichiers        - Tous les scripts"
    echo ""
    echo -e "${RED}0Ô∏è‚É£  Quitter${NC}"
    echo ""
}

check_api_status() {
    echo -e "${CYAN}üîç V√©rification de l'√©tat de l'API...${NC}"
    
    if curl -s "$API_URL/" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API accessible${NC}"
        return 0
    else
        echo -e "${RED}‚ùå API non accessible${NC}"
        return 1
    fi
}

run_option() {
    case $1 in
        1)
            echo -e "${BLUE}üöÄ Ex√©cution du test rapide...${NC}"
            ./quick_api_test.sh
            ;;
        2)
            echo -e "${BLUE}üî¨ Ex√©cution des tests complets...${NC}"
            ./run_api_tests.sh
            ;;
        3)
            echo -e "${BLUE}üìä Ouverture du tableau de bord...${NC}"
            ./test_dashboard.sh
            ;;
        12)
            echo -e "${BLUE}üöÄ Test Rapide v2 (smoke)...${NC}"
            ./quick_api_test_v2.sh
            ;;
        13)
            echo -e "${BLUE}üéØ Tests Core v2 (essentiels)...${NC}"
            ./run_api_tests_v2.sh http://localhost:8000 core
            ;;
        14)
            echo -e "${BLUE}üåç Tests Complets v2 (tous endpoints)...${NC}"
            ./run_api_tests_v2.sh http://localhost:8000 all
            ;;
        4)
            echo -e "${BLUE}‚öôÔ∏è  Configuration automatique...${NC}"
            ./setup_tests.sh
            ;;
        5)
            check_api_status
            echo ""
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            ;;
        6)
            echo -e "${BLUE}üîÑ Red√©marrage de l'API...${NC}"
            cd ..
            sudo docker-compose restart
            echo -e "${GREEN}‚úÖ API red√©marr√©e${NC}"
            cd test
            echo ""
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            ;;
        7)
            echo -e "${BLUE}üìà Analyse des r√©sultats...${NC}"
            echo "Fichiers de rapport disponibles:"
            ls -la api_test_report_*.json 2>/dev/null || echo "Aucun rapport trouv√©"
            echo ""
            echo "Entrez le nom du fichier √† analyser (ou Entr√©e pour le plus r√©cent):"
            read filename
            if [[ -z "$filename" ]]; then
                filename=$(ls -t api_test_report_*.json 2>/dev/null | head -1)
            fi
            if [[ -n "$filename" && -f "$filename" ]]; then
                python3 analyze_test_results.py "$filename"
            else
                echo -e "${RED}‚ùå Fichier non trouv√©${NC}"
            fi
            echo ""
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            ;;
        8)
            echo -e "${BLUE}üìä D√©marrage du monitoring continu...${NC}"
            echo "Appuyez sur Ctrl+C pour arr√™ter"
            sleep 2
            ./monitor_api.sh
            ;;
        9)
            echo -e "${BLUE}üìã Affichage des logs...${NC}"
            cd ..
            echo "Logs de l'API (derni√®res 50 lignes):"
            sudo docker logs eir_web --tail 50
            echo ""
            echo "Logs de la base de donn√©es (derni√®res 20 lignes):"
            sudo docker logs eir_db --tail 20
            cd test
            echo ""
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            ;;
        10)
            echo -e "${BLUE}üìö Affichage de la documentation...${NC}"
            if [[ -f "README_TESTS.md" ]]; then
                less README_TESTS.md
            else
                echo -e "${RED}‚ùå Documentation non trouv√©e${NC}"
            fi
            ;;
        11)
            echo -e "${BLUE}üìÅ Liste des fichiers de test:${NC}"
            echo ""
            echo -e "${GREEN}Scripts principaux:${NC}"
            ls -la *.sh 2>/dev/null || echo "Aucun script .sh trouv√©"
            echo ""
            echo -e "${GREEN}Scripts Python:${NC}"
            ls -la *.py 2>/dev/null || echo "Aucun script .py trouv√©"
            echo ""
            echo -e "${GREEN}Rapports g√©n√©r√©s:${NC}"
            ls -la api_test_report_*.json 2>/dev/null || echo "Aucun rapport trouv√©"
            echo ""
            echo -e "${GREEN}Fichiers de log:${NC}"
            ls -la *.log 2>/dev/null || echo "Aucun log trouv√©"
            echo ""
            echo "Appuyez sur Entr√©e pour continuer..."
            read
            ;;
        0)
            echo -e "${GREEN}üëã Au revoir !${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Option invalide${NC}"
            sleep 1
            ;;
    esac
}

# V√©rification du r√©pertoire
if [[ ! -f "test_api_endpoints.py" ]]; then
    echo -e "${RED}‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le dossier test/${NC}"
    echo "Utilisation: cd /home/mohamed/Documents/projects/eir-project/test && ./menu_tests.sh"
    exit 1
fi

# Boucle principale
while true; do
    show_header
    show_menu
    
    echo -ne "${CYAN}Choisissez une option: ${NC}"
    read choice
    
    echo ""
    run_option "$choice"
    echo ""
done
