#!/bin/bash

echo "üßπ NETTOYAGE PROFESSIONNEL DU PROJET EIR"
echo "========================================"
echo ""

# 1. Supprimer les fichiers Python compil√©s
echo "1Ô∏è‚É£ Suppression des fichiers Python compil√©s..."
find . -name "*.pyc" -delete
find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
echo "‚úÖ Fichiers .pyc et dossiers __pycache__ supprim√©s"

# 2. Supprimer les fichiers de test temporaires
echo ""
echo "2Ô∏è‚É£ Suppression des fichiers de test temporaires..."
rm -f test_*.py test_*.sh 2>/dev/null || true
echo "‚úÖ Fichiers de test temporaires supprim√©s"

# 3. Nettoyer les logs anciens (garder les plus r√©cents)
echo ""
echo "3Ô∏è‚É£ Nettoyage des logs anciens..."
if [ -d "backend/logs" ]; then
    find backend/logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
    echo "‚úÖ Logs de plus de 7 jours supprim√©s"
else
    echo "‚ÑπÔ∏è Aucun dossier de logs trouv√©"
fi

# 4. Nettoyer les fichiers de sauvegarde temporaires
echo ""
echo "4Ô∏è‚É£ Suppression des fichiers de sauvegarde temporaires..."
find . -name "*.bak" -delete 2>/dev/null || true
find . -name "*.tmp" -delete 2>/dev/null || true
find . -name "*~" -delete 2>/dev/null || true
echo "‚úÖ Fichiers de sauvegarde temporaires supprim√©s"

# 5. Organiser les fichiers de documentation
echo ""
echo "5Ô∏è‚É£ Organisation des fichiers de documentation..."
mkdir -p docs/reports 2>/dev/null || true
mv *_REPORT.md docs/reports/ 2>/dev/null || true
mv PROFILE_ENDPOINT_IMPROVEMENTS.md docs/ 2>/dev/null || true
echo "‚úÖ Documentation organis√©e"

# 6. V√©rifier la structure du .gitignore
echo ""
echo "6Ô∏è‚É£ V√©rification du .gitignore..."
if ! grep -q "__pycache__" .gitignore 2>/dev/null; then
    echo "
# Python
__pycache__/
*.py[cod]
*\$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Environment variables
.env
.env.local
.env.production

# Logs
*.log
logs/

# Database
*.db
*.sqlite

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Docker
.dockerignore

# Test files
test_*.py
test_*.sh
*.test

# Backup files
*.bak
*.tmp
*~
" >> .gitignore
    echo "‚úÖ .gitignore mis √† jour"
else
    echo "‚úÖ .gitignore d√©j√† configur√©"
fi

# 7. V√©rifier les permissions des scripts
echo ""
echo "7Ô∏è‚É£ Correction des permissions des scripts..."
find . -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
echo "‚úÖ Permissions des scripts corrig√©es"

# 8. Optimiser le docker-compose pour la production
echo ""
echo "8Ô∏è‚É£ V√©rification de la configuration Docker..."
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ Configuration Docker pr√©sente"
else
    echo "‚ö†Ô∏è Configuration Docker manquante"
fi

echo ""
echo "üéâ NETTOYAGE TERMIN√â AVEC SUCC√àS!"
echo "=================================="
echo ""
echo "üìã R√©sum√© des actions effectu√©es:"
echo "  ‚Ä¢ Fichiers Python compil√©s supprim√©s"
echo "  ‚Ä¢ Fichiers de test temporaires supprim√©s"
echo "  ‚Ä¢ Logs anciens nettoy√©s"
echo "  ‚Ä¢ Fichiers de sauvegarde supprim√©s"
echo "  ‚Ä¢ Documentation organis√©e"
echo "  ‚Ä¢ .gitignore v√©rifi√©/mis √† jour"
echo "  ‚Ä¢ Permissions des scripts corrig√©es"
echo ""
echo "‚úÖ Le projet est pr√™t pour le commit et push!"
