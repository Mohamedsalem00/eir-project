#!/bin/bash

echo "üîç VALIDATION FINALE AVANT PUSH"
echo "==============================="
echo ""

# 1. V√©rifier que l'application d√©marre correctement
echo "1Ô∏è‚É£ V√©rification du d√©marrage de l'application..."
if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ Application fonctionne correctement"
else
    echo "‚ö†Ô∏è Application non accessible - d√©marrage des containers..."
    docker compose up -d
    sleep 5
    if curl -s http://localhost:8000/health > /dev/null; then
        echo "‚úÖ Application d√©marr√©e avec succ√®s"
    else
        echo "‚ùå Probl√®me de d√©marrage de l'application"
        exit 1
    fi
fi

# 2. V√©rifier la base de donn√©es
echo ""
echo "2Ô∏è‚É£ V√©rification de la base de donn√©es..."
if docker compose exec db psql -U postgres -d eir_project -c "\dt" > /dev/null 2>&1; then
    echo "‚úÖ Base de donn√©es accessible"
    
    # V√©rifier la table password_reset
    if docker compose exec db psql -U postgres -d eir_project -c "\d password_reset" > /dev/null 2>&1; then
        echo "‚úÖ Table password_reset pr√©sente"
    else
        echo "‚ö†Ô∏è Table password_reset manquante"
    fi
else
    echo "‚ùå Probl√®me d'acc√®s √† la base de donn√©es"
    exit 1
fi

# 3. Test rapide des endpoints critiques
echo ""
echo "3Ô∏è‚É£ Test des endpoints critiques..."

# Test health check
if curl -s http://localhost:8000/health | grep -q "sain"; then
    echo "‚úÖ Health check OK"
else
    echo "‚ùå Health check √©chec"
    exit 1
fi

# Test endpoint profile simple (sans auth pour test basique)
if curl -s http://localhost:8000/docs > /dev/null; then
    echo "‚úÖ Documentation API accessible"
else
    echo "‚ö†Ô∏è Documentation API non accessible"
fi

# 4. V√©rifier la structure des fichiers
echo ""
echo "4Ô∏è‚É£ V√©rification de la structure des fichiers..."

# Fichiers essentiels
essential_files=(
    "backend/app/models/password_reset.py"
    "backend/app/schemas/password_reset.py"
    "backend/migrations/003_add_password_reset_table.sql"
    "COMMIT_SUMMARY.md"
    "docker-compose.yml"
    "README.md"
)

for file in "${essential_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file manquant"
        exit 1
    fi
done

# 5. V√©rifier que Git est pr√™t
echo ""
echo "5Ô∏è‚É£ V√©rification Git..."
if git status --porcelain | grep -q .; then
    echo "‚ö†Ô∏è Fichiers non commit√©s d√©tect√©s"
    git status --short
else
    echo "‚úÖ Tous les fichiers sont commit√©s"
fi

# 6. Informations du commit
echo ""
echo "6Ô∏è‚É£ Informations du dernier commit..."
echo "Commit: $(git log --oneline -1)"
echo "Auteur: $(git log -1 --pretty=format:'%an <%ae>')"
echo "Date: $(git log -1 --pretty=format:'%cd')"

echo ""
echo "üéâ VALIDATION TERMIN√âE AVEC SUCC√àS!"
echo "==================================="
echo ""
echo "üìã √âtat du projet:"
echo "  ‚úÖ Application fonctionnelle"
echo "  ‚úÖ Base de donn√©es op√©rationnelle"
echo "  ‚úÖ Endpoints critiques test√©s"
echo "  ‚úÖ Structure des fichiers valid√©e"
echo "  ‚úÖ Git repository propre"
echo ""
echo "üöÄ PR√äT POUR LE PUSH!"
echo ""
echo "Pour pusher les changements:"
echo "git push origin main"
