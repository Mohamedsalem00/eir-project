#!/bin/bash
# scripts/manage-eir.sh
# Main management script for EIR project

set -e

# Navigate to project root
cd "$(dirname "$0")/.."

# Source Docker utilities
source scripts/docker-utils.sh

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${CYAN}${BOLD}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üèóÔ∏è  GESTIONNAIRE EIR üèóÔ∏è                    ‚ïë"
    echo "‚ïë              Syst√®me de Gestion des Conteneurs              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_menu() {
    echo -e "${BOLD}üìã Options disponibles :${NC}"
    echo ""
    echo -e "${GREEN}üîÑ CONTENEURS :${NC}"
    echo "  1) Reconstruire compl√®tement les conteneurs"
    echo "  2) Red√©marrer les conteneurs existants"
    echo "  3) Red√©marrer un service sp√©cifique (web/db)"
    echo ""
    echo -e "${BLUE}üóÑÔ∏è  BASE DE DONN√âES :${NC}"
    echo "  4) Reconstruire compl√®tement la base de donn√©es"
    echo "  5) R√©initialiser rapidement la base de donn√©es"
    echo ""
    echo -e "${YELLOW}üìä STATUT & TESTS :${NC}"
    echo "  6) Afficher le statut des services"
    echo "  7) Tester l'API francis√©e"
    echo "  8) Voir les logs des services"
    echo "  9) Lancer les tests complets du syst√®me"
    echo ""
    echo -e "${CYAN}üõ†Ô∏è  UTILITAIRES :${NC}"
    echo " 10) Nettoyer les ressources Docker"
    echo " 11) Sauvegarder la base de donn√©es"
    echo " 12) Restaurer une sauvegarde"
    echo ""
    echo -e "${RED}‚ùå SORTIE :${NC}"
    echo "  0) Quitter"
    echo ""
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to check Docker status and permissions
check_docker_status() {
    echo "üîç V√©rification de Docker et configuration des permissions..."
    setup_docker_commands
    echo -e "${GREEN}‚úÖ Docker configur√© et pr√™t${NC}"
}

# Function to show service status
show_status() {
    echo -e "${BOLD}üìä Statut des services EIR :${NC}"
    echo ""
    
    # Check Docker
    if run_docker info > /dev/null 2>&1; then
        log_success "Docker : Op√©rationnel"
    else
        log_error "Docker : Non disponible"
        return 1
    fi
    
    # Check containers
    if run_docker_compose ps -q | grep -q .; then
        echo ""
        echo "üì¶ Conteneurs :"
        run_docker_compose ps
        
        # Check database
        echo ""
        if run_docker_compose exec -T db pg_isready -U postgres >/dev/null 2>&1; then
            log_success "Base de donn√©es : Accessible"
            
            # Count tables and data
            local table_count user_count
            table_count=$(run_docker_compose exec -T db psql -U postgres -d imei_db -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | tr -d ' \n' || echo "0")
            user_count=$(run_docker_compose exec -T db psql -U postgres -d imei_db -t -c "SELECT COUNT(*) FROM Utilisateur;" 2>/dev/null | tr -d ' \n' || echo "0")
            
            echo "  ‚îî‚îÄ Tables : $table_count"
            echo "  ‚îî‚îÄ Utilisateurs : $user_count"
        else
            log_error "Base de donn√©es : Non accessible"
        fi
        
        # Check API
        echo ""
        if curl -s -f http://localhost:8000/verification-etat > /dev/null 2>&1; then
            log_success "API : Op√©rationnelle (http://localhost:8000)"
        else
            log_warning "API : Non accessible"
        fi
        
    else
        log_warning "Aucun conteneur en cours d'ex√©cution"
    fi
    
    echo ""
    echo "üìç Points d'acc√®s :"
    echo "  üåê Documentation : http://localhost:8000/docs"
    echo "  üîç Sant√© API : http://localhost:8000/verification-etat"
    echo "  üè† Accueil : http://localhost:8000/"
}

# Function to test francized API
test_francized_api() {
    echo -e "${BOLD}üß™ Test de l'API francis√©e :${NC}"
    echo ""
    
    if ! curl -s -f http://localhost:8000/verification-etat > /dev/null 2>&1; then
        log_error "API non accessible. D√©marrez les conteneurs d'abord."
        return 1
    fi
    
    echo "1. Test endpoint de sant√© francis√© :"
    curl -s http://localhost:8000/verification-etat | jq '.' 2>/dev/null || curl -s http://localhost:8000/verification-etat
    
    echo ""
    echo "2. Test langues support√©es :"
    curl -s http://localhost:8000/langues | jq '.langues_supportees' 2>/dev/null || curl -s http://localhost:8000/langues
    
    echo ""
    echo "3. Test recherche IMEI (si donn√©es pr√©sentes) :"
    curl -s http://localhost:8000/imei/352745080123456 | jq '.' 2>/dev/null || curl -s http://localhost:8000/imei/352745080123456
    
    echo ""
    log_success "Test de l'API francis√©e termin√©"
}

# Function to show logs
show_logs() {
    echo -e "${BOLD}üìù Logs des services :${NC}"
    echo ""
    echo "Quel service voulez-vous consulter ?"
    echo "1) Web (API)"
    echo "2) Base de donn√©es"
    echo "3) Tous les services"
    echo "4) Retour au menu principal"
    echo ""
    read -p "Votre choix (1-4) : " log_choice
    
    case $log_choice in
        1)
            echo ""
            log_info "Logs du service web (derni√®res 50 lignes) :"
            run_docker_compose logs --tail=50 web
            ;;
        2)
            echo ""
            log_info "Logs de la base de donn√©es (derni√®res 50 lignes) :"
            run_docker_compose logs --tail=50 db
            ;;
        3)
            echo ""
            log_info "Logs de tous les services (derni√®res 30 lignes) :"
            run_docker_compose logs --tail=30
            ;;
        4)
            return 0
            ;;
        *)
            log_error "Choix invalide"
            ;;
    esac
}

# Function to clean Docker resources
clean_docker() {
    echo -e "${BOLD}üßπ Nettoyage des ressources Docker :${NC}"
    echo ""
    log_warning "Cette op√©ration va supprimer :"
    echo "  - Les conteneurs arr√™t√©s"
    echo "  - Les images non utilis√©es"
    echo "  - Les volumes non utilis√©s"
    echo "  - Les r√©seaux non utilis√©s"
    echo ""
    read -p "Continuer ? (o/N) : " confirm
    
    if [[ "$confirm" =~ ^[Oo]$ ]]; then
        log_info "Nettoyage en cours..."
        run_docker system prune -f
        run_docker volume prune -f
        log_success "Nettoyage termin√©"
    else
        log_info "Nettoyage annul√©"
    fi
}

# Function to backup database
backup_database() {
    echo -e "${BOLD}üíæ Sauvegarde de la base de donn√©es :${NC}"
    echo ""
    
    if ! run_docker_compose exec -T db pg_isready -U postgres >/dev/null 2>&1; then
        log_error "Base de donn√©es non accessible"
        return 1
    fi
    
    local backup_dir="backups"
    local backup_file="backup_$(date +%Y%m%d_%H%M%S).sql"
    
    mkdir -p "$backup_dir"
    
    log_info "Cr√©ation de la sauvegarde..."
    if run_docker_compose exec -T db pg_dump -U postgres imei_db > "$backup_dir/$backup_file"; then
        log_success "Sauvegarde cr√©√©e : $backup_dir/$backup_file"
        echo "Taille : $(du -h "$backup_dir/$backup_file" | cut -f1)"
    else
        log_error "√âchec de la sauvegarde"
        return 1
    fi
}

# Function to restore database
restore_database() {
    echo -e "${BOLD}üì• Restauration de la base de donn√©es :${NC}"
    echo ""
    
    local backup_dir="backups"
    
    if [[ ! -d "$backup_dir" ]]; then
        log_error "Aucun dossier de sauvegarde trouv√©"
        return 1
    fi
    
    echo "Sauvegardes disponibles :"
    local backups=($(ls -1t "$backup_dir"/*.sql 2>/dev/null || true))
    
    if [[ ${#backups[@]} -eq 0 ]]; then
        log_error "Aucune sauvegarde trouv√©e"
        return 1
    fi
    
    for i in "${!backups[@]}"; do
        echo "$((i+1))) $(basename "${backups[$i]}")"
    done
    
    echo ""
    read -p "Choisir une sauvegarde (num√©ro) : " backup_choice
    
    if [[ "$backup_choice" =~ ^[0-9]+$ ]] && [[ "$backup_choice" -ge 1 ]] && [[ "$backup_choice" -le ${#backups[@]} ]]; then
        local selected_backup="${backups[$((backup_choice-1))]}"
        
        log_warning "Cette op√©ration va remplacer toutes les donn√©es actuelles"
        read -p "Continuer ? (o/N) : " confirm
        
        if [[ "$confirm" =~ ^[Oo]$ ]]; then
            log_info "Restauration en cours..."
            if run_docker_compose exec -T db psql -U postgres -d imei_db < "$selected_backup"; then
                log_success "Restauration termin√©e"
            else
                log_error "√âchec de la restauration"
                return 1
            fi
        else
            log_info "Restauration annul√©e"
        fi
    else
        log_error "Choix invalide"
    fi
}

# Function to handle service-specific restart
restart_specific_service() {
    echo -e "${BOLD}üîÑ Red√©marrage d'un service sp√©cifique :${NC}"
    echo ""
    echo "Quel service voulez-vous red√©marrer ?"
    echo "1) Service web (API)"
    echo "2) Base de donn√©es"
    echo "3) Retour au menu principal"
    echo ""
    read -p "Votre choix (1-3) : " service_choice
    
    case $service_choice in
        1)
            log_info "Red√©marrage du service web..."
            ./scripts/restart-containers.sh --service web
            ;;
        2)
            log_info "Red√©marrage de la base de donn√©es..."
            ./scripts/restart-containers.sh --service db
            ;;
        3)
            return 0
            ;;
        *)
            log_error "Choix invalide"
            ;;
    esac
}

# Main menu loop
main() {
    print_header
    
    # Check Docker availability
    check_docker_status
    
    while true; do
        echo ""
        print_menu
        read -p "Votre choix (0-12) : " choice
        echo ""
        
        case $choice in
            1)
                log_info "Lancement de la reconstruction compl√®te des conteneurs..."
                ./scripts/rebuild-containers.sh
                ;;
            2)
                log_info "Red√©marrage des conteneurs..."
                ./scripts/restart-containers.sh
                ;;
            3)
                restart_specific_service
                ;;
            4)
                log_info "Lancement de la reconstruction de la base de donn√©es..."
                ./scripts/rebuild-database.sh
                ;;
            5)
                log_info "R√©initialisation rapide de la base de donn√©es..."
                ./scripts/reset-database.sh
                ;;
            6)
                show_status
                ;;
            7)
                test_francized_api
                ;;
            8)
                show_logs
                ;;
            9)
                log_info "Lancement des tests complets du syst√®me..."
                ./scripts/test-system.sh
                ;;
            10)
                clean_docker
                ;;
            11)
                backup_database
                ;;
            12)
                restore_database
                ;;
            0)
                echo -e "${GREEN}üëã Au revoir !${NC}"
                exit 0
                ;;
            *)
                log_error "Choix invalide. Veuillez choisir entre 0 et 12."
                ;;
        esac
        
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Handle interruption
trap 'echo ""; log_error "Processus interrompu"; exit 130' INT

# Run main function
main
